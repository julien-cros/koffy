// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
	relationMode = "prisma"
}

model User {
	id				String  @id @default(cuid())
	email			String  @unique
	avatar		String?
	avatarKey	String?
	name			String @unique
 	followers Follows[] @relation("follower")
  following Follows[] @relation("following")
	posts			Posts[]
	profile		Profile?
	saved			Saved[]
	comments	Comment[]
	wishlist	Wishlist[]
}

model Posts {
	id							String	 @id @default(cuid()) 
	title						String
	brand						String
	price						String?
	tasting					String?
	variety					String
	rate						Int
	note						String?
	status					Boolean
	weight					String?
	country					String?
	domain					String?
	altitude				String?
	process					String?
	type						String?
	imageUrl				String?
	imageKey				String?
	createdAt				DateTime @default(now())
	updatedAt				DateTime @updatedAt
	comments				Comment[]
	author					User?	@relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	authorId				String?

	@@index([authorId])
}

model Saved {
	id				String	@id @default(cuid())
	postId		String
	user		User?	@relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	userId	String?
}

model Follows{
	follower		User	@relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	followerId	String
	following		User	@relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	followingId	String

	@@id([followerId, followingId])
}

model Profile {
	id				String	@id @default(cuid())
	bio				String?
	location	String?
	user			User	@relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	userId		String	@unique
}

model Comment {
	id				String	@id @default(cuid())
	content		String
	postId		String?
	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt
	post			Posts?	@relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	author		User?	@relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	authorId	String?
}

model Wishlist {
	id				String	@id @default(cuid())
	title			String?
	brand			String?
	price			String?
	url				String?
	author		User?	@relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	authorId	String?
}
